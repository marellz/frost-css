$input-height: 50px;
$input-border-radius : 5px;
.input{
  display: flex;
  flex-direction: column-reverse;
  position: relative;


  min-width: 200px;
  // max-width: 450px;

  input,label,span,i{
    display: block;
    background: none;
  }

  .help-text,.input-txt{
    display: block;
  }

  //global
  & > input,
  &.textarea > textarea {
    color: inherit;
    // border: $border-props;
  }

  input{
    font: inherit;
    color: inherit;

    @include input-props($input-height);
    @include input-style;

    //label
    &+label{
      @include label-props();
    }

    //disabled
    &:disabled{
      color: gray;
      background: rgba(black,.15);
      pointer-events: none;
      cursor: not-allowed;

      &+label{
        color: gray;
        background: none;
      }
    }
  }

  //helptext
  &:before{
    @include input-helptext;
    line-height: 17px;
    font-size: 13px;
    padding-left: 20px;
  }

  //valid/invalid
  &.is-valid{
    color: $green;
  }
  &.is-invalid{
    color: $red;
  }


  // ANIMATED -> Google Style
  &.animated{
    $lh: $input-height + 10px;
    position: relative;
    input{
      height: $lh;
      border-top: none;
      border-left: none;
      border-right: none;
      border-radius: 0;
      &+label{
        position: absolute;
        top: 0;
        @include input-props($lh+5px);
        line-height: $input-height;
      }
    }

    &.has-data input,
    input:focus{
      &+label{
        transform: translateY(-5px);
        font-size: 10px;
        line-height: 11px;
      }

    }

    label{
      transition: all 0.2s ease;
    }
  }

  //FILE
  &.file{
    input{
      @include hide;
      &+label{@include hide}
      &[type='file'],
      &[type='image']{
        border: none;
        height: 0px;
        width: 0px;
        font-size: 0;
        &+label{
          @include no-select;
          @include show;
          @include input-style;
          @include input-props($input-height);
          line-height: $input-height;
          text-align: center !important;
          overflow: hidden;
          padding: 0;
        }
      }
    }

    //active file-input
    &.has-file{
      input{
        &+label{
          background: $accent-color;
          color: white;
        }
      }
    }
  }

  //TEXTAREA

  &.textarea{
    max-width: none;
    // hide any invalid elements
    input{display: none;}

    textarea,label,span{
      display: block
    }

    label{
      @include label-props;
    }

    textarea{
      @include input-style;
      @include textarea-props;
    }

    &.h{
      textarea{
        resize: horizontal;
      }
    }
    &.v{
      textarea{
        resize: vertical;
      }
    }
    &.no-resize{
      textarea{
        resize: none;
      }
    }
  }

  // SELECT
  &.select{
    display: inline-block;
    position: relative;
    min-width: unset;
    select{
      position: relative;
      @include select-props;
      outline: none;
      background: transparent;
      -moz-appearance:none;
      -webkit-appearance:none;
      z-index: 5;
      &::-ms-expand{
        display: none;
      }

    }

    &:after{
      z-index: 1;
      @include pseudo;
      position: absolute;
      right: $input-height - 35px;
      top: 50%;
      transform: translateY(1px);
      border: 7px solid transparent;
      border-top-color: rgba(black,.45);
    }
    &.c{
      select{
        text-align: center;
      }
    }

    //multiple select
    &.group{
      max-width: none;
      display: flex;
      flex-direction: row;
      select{
        //props for multiple select
      }
    }
  }



  //PILLS
  // pill group
  &.pills{
    max-width: none;
    flex-direction: row;
    flex-wrap: wrap;
    position: relative;

    &:before{
      display: none;
    }

    input{
      height: 0px;
      width: 0px;
      position: absolute;
      @include hide;
      &+label{
        @include input-style;
        @include input-props;
        @include no-select;
        margin: 5px;
        padding: 0 1em;

        height: 40px;
        line-height: 38px;
      }

      &:checked{
        &+label{
          border-color: $accent-color;
          background:$accent-color;
          color: white;
        }
      }
    }

    //wrapper
    .pill{
      display: inline-block;
      margin: 5px;
      input{
        &+label{
          margin: 0;
        }
      }

    }
    // centered pills
    &.c{
      justify-content: center;
    }

    //block-level
    &.b{
      flex-direction: column;
      .pill{
        label{
          width: 100%;
          line-height: normal;
          height: auto;
          padding: 10px;
        }
      }
    }
  }




  // TOGGLE
  @mixin toggle($toggle-size,$gap:1px){
    height: $toggle-size;
    width: $toggle-size * 2;
    border-radius: $toggle-size / 2;
    &:before{
      height: $toggle-size - $gap*2;
      width: $toggle-size - $gap*2;
      left: $gap;
      top: $gap;
    }
  }
  &.toggle{
    @include selectable-label;
    margin: 15px 0;
    flex-direction: row;
    align-items: center;
    .toggle-label{
      display: inline-block;
      line-height: 40px;
      vertical-align: middle;
      @include no-select;
    }

    $gap: 2px;
    input{
      &+label{
        display: flex;
        align-items: center;
        margin-left: auto;
        position: relative;
        @include toggle(40px,$gap);
        background: rgba(black,.15);
        transition: all 0.5s ease;
        &:before{
          right: auto;
          @include pseudo;
          position: absolute;
          right: unset;
          border-radius: 50%;
          background: white;
        }
      }

      &:checked{
        &+label{
          background: $accent-color;
          &:before{
            left: unset;
            right: $gap;
          }
        }
      }
    }
    &.large{
      $gap: 3px;
      input+label{
        @include toggle(50px,$gap);
      }
      input:checked + label:before{
        left: unset;
        right: $gap;
      }

    }
    &.small{
      $gap: 2px;
      input+label{
        @include toggle(30px,$gap);
      }
      input:checked + label:before{
        left: unset;
        right: $gap;
      }
    }

  }
}
