//buttons
$button-height-default: 40px;
$button-border-radius-default: 3px;
$button-border-width-default: 1px;
$button-padding-default: 0 2em;

$button-height: if(
  variable_exists(button-height),
  $button-height,
  $button-height-default
);
$button-border-radius: if(
  variable_exists(button-border-radius),
  $button-border-radius,
  $button-border-radius-default
);
$button-border-width: if(
  variable_exists(button-border-width),
  $button-border-width,
  $button-border-width-default
);
$button-padding: if(
  variable_exists(button-padding),
  $button-padding,
  $button-padding-default
);


@mixin button(){
  display: inline-block;
  vertical-align: middle;
  text-align: center !important;
  padding: $button-padding;
  line-height: $button-height;
  height: $button-height;

  font-size: 15px;
  font-style: normal;
  font-family: inherit;
  font-weight: normal;

  border: none;
  overflow: hidden;
  outline: none;

  &::-moz-focus-inner{
    border: 0;
  }
}


@mixin close-button($height, $width : false){
  $radius : $height;
  width: $radius;
  height:  $radius;
  line-height:  $radius;
  content: '';
  padding: 0;
  min-width: unset;
  border-radius: 50%;
  position: relative;
  &:after,&:before{
    @if($width){
      border-radius: $width;
    }
    $shear-height : 3px;
    $shear-width : 18px;
    @include pseudo;
    height: $shear-height;
    width: $shear-width;
    background: currentColor;
    position: absolute;
    left: 50%;
    top: 50%;
    margin-left: $shear-width / -2;
    margin-top: $shear-height / -2;
  }

  &:after{
    transform: rotate(-45deg);
  }

  &:before{
    transform: rotate(45deg);
  }

  &.s{
    color: grey;
    background: inherit;
    border: $button-border-width solid currentColor;
  }
}

@mixin loading-button($height){
  $loading-height: $height;
  $loading-gap: 6px;
  $loading-shear-width: 3px;
  min-width: unset;
  padding: $loading-gap;
  height: $loading-height;
  line-height: $loading-height;
  width: $loading-height;
  &:before{
    @include pseudo;
    display: inline-block;
    height: $loading-height - (2 * ($loading-gap + $loading-shear-width));
    width: $loading-height - (2 * ($loading-gap + $loading-shear-width));
    border: $loading-shear-width solid currentColor;
    border-top-color: transparent;
    border-bottom-color: transparent;
    border-radius: 50%;
    animation: loading-button 1s linear infinite;
  }
}

@keyframes loading-button{
  0% {
    transform: rotate(0deg)
  }
  100%{
    transform: rotate(360deg);
  }
}



@function button-s-line-height() {
  $line-height: $button-height - (2 * $button-border-width);
  @return $line-height;
}

.buttons {
  display: flex;
  justify-content: center;
  align-content: center;
  button,
  .button {
    margin: 5px;
  }
}

button,
.button {
  @include no-select;
  @include button();
  @if ($button-border-radius) {
    border-radius: $button-border-radius;
  }

  //primary
  & {
    background: $accent-color;
    color: white;
  }

  // secondary
  &.-s,
  &.secondary{
    background: $alt-color;
  }

  //outlined
  &.outline {
    line-height: button-s-line-height();
    border: $button-border-width solid currentColor;
    background: transparent;
    color: $accent-color;
    &.-s,&.secondary{
      color: $alt-color;
    }
  }

  //block
  &.-b,
  &.block{
    display: block;
    width: 100%;
  }


  // disabled
  &:disabled,
  &.disabled {
    line-height: $button-height;
    border: none;
    background: rgba(black, 0.15);
    color: grey;
    cursor: not-allowed;
  }

  // SPECIAL/EVENT BUTTONS

  //close
  &.close {
    color: white;
    @include close-button($button-height);
    &.s {
      color: $accent-color;
    }
  }

  //loading
  &.loading {
    @include loading-button($button-height);
  }

  // NO STYLING

  //default
  &.default,
  &.no-props {
    background: transparent;
    padding: 0 0.25em;
    color: inherit;
    min-width: unset;
    line-height: initial;
    height: auto;
  }
}
