$input-height-default: 50px;
$input-border-radius-default: 5px;
$input-background-default: transparent;

$input-border-width-default: 1px;
$input-border-style-default: solid;
$input-border-color-default: currentColor;
$input-border-default: true;

$input-border: if(variable_exists(input-border),$input-border,$input-border-default);

$input-padding-default: 0 1em;

$input-pill-padding-default: 0 1.5em;

$label-margin-default: .5em 0;

$form-group-margin: 0 20px;
$form-group-padding: 0 20px;


$input-border-style: if(
  variable_exists(input-border-style),
  $input-border-style,
  $input-border-style-default
);

$input-border-color: if(
  variable_exists(input-border-color),
  $input-border-color,
  $input-border-color-default
);

$input-border-width: if(
  variable_exists(input-border-width),
  $input-border-width,
  $input-border-width-default
);

$input-height: if(
  variable_exists(input-height),
  $input-height,
  $input-height-default
);

$input-background: if(
  variable_exists(input-background),
  $input-background,
  $input-background-default
);

$input-border-radius: if(
  variable_exists(input-border-radius),
  $input-border-radius,
  $input-border-radius-default
);

$input-padding: if(
  variable_exists(input-padding),
  $input-padding,
  $input-padding-default
);

$input-pill-padding: if(
  variable_exists(input-pill-padding),
  $input-pill-padding,
  $input-pill-padding-default
);

$label-margin: if(
  variable_exists(label-margin),
  $label-margin,
  $label-margin-default
);

@mixin input-border-props($direction: false) {
  @if($input-border){
    $prop: if($direction, border-#{$direction}, #{border});
    #{$prop}: $input-border-width $input-border-style $input-border-color;
  } @else {
    border:none;
  }

  @if($input-border == 'none'){
    border: none;
  }
}

@mixin input-style(){
  border-radius: $input-border-radius;
  padding: $input-padding;
  background: $input-background;
  
  // border: $input-border-props;
  @include input-border-props;
}

@mixin input-props(){
  height: $input-height;
  outline: none;
}

@mixin label-props($font-size:15px){
  text-align: left;
  font-size: $font-size;
  padding: $input-padding;
  margin: $label-margin;
}

@mixin input-helptext($font-size: 15px){
  @include label-props($font-size);
  display: block;
  content: attr(data-text);
}

@mixin animated-input-props(){
  @include input-props;
}

@mixin textarea-props(){
  width: 100%;
  min-height: 100px;
  max-width: 100%;
  padding: .5em;
  line-height: normal;
  font: inherit;
  font-size: 16px;
  outline: 0;
  -webkit-box-shadow: none;
   -moz-box-shadow: none;
   box-shadow: none;
}


@mixin select-props($height: 40px){
  @include input-props;
  @include input-style;
  display: block;
  width: 100%;
  height: $input-height;
  padding: 0 20px;
  padding-right: $input-height;
}

@mixin selectable-label{
  input{
    @include hide;
    height: 0;
    width: 0;
    font-size: 0;
    // &+label{}
  }
}


@mixin placeholder{
    input::-webkit-input-placeholder{@content;}
    input::-moz-placeholder{@content;}
    input:-moz-placeholder{@content;}
    input:-ms-placeholder{@content;}
    
    textarea::-webkit-input-placeholder{@content;}
    textarea::-moz-placeholder{@content;}
    textarea:-moz-placeholder{@content;}
    textarea:-ms-placeholder{@content;}
}

@mixin input-placeholder{
  input::-webkit-input-placeholder{@content;}
  input::-moz-placeholder{@content;}
  input:-moz-placeholder{@content;}
  input:-ms-placeholder{@content;}
}

@mixin textarea-placeholder{
  textarea::-webkit-input-placeholder{@content;}
  textarea::-moz-placeholder{@content;}
  textarea:-moz-placeholder{@content;}
  textarea:-ms-placeholder{@content;}
}

.form-group {
  padding: $form-group-padding;
  margin: $form-group-margin;
}

.input {
  display: flex;
  flex-direction: column-reverse;
  position: relative;
  min-width: 200px;
  max-width: 450px;

  input,
  label,
  span,
  i {
    display: block;
    background: none;
  }

  //global
  & > input,
  &.textarea > textarea {
    color: inherit;
  }

  input {
    font: inherit;
    color: inherit;

    @include input-props;
    @include input-style;

    //disabled
    &:disabled {
      color: gray;
      background: rgba(black, 0.15);
      pointer-events: none;
      cursor: not-allowed;

      & + label {
        color: gray;
        background: none;
      }
    }
  }

  label {
    @include label-props;
  }

  .response-txt {
    font-size: 12px;
    padding: 5px;
    color: $grey;
    order: -1;
    &.red,
    &.error {
      color: $red;
    }
    &.green,
    &.success {
      color: $green;
    }
  }

  // valid/invalid
  &.is-valid {
    color: $green;
  }
  &.is-invalid {
    color: $red;
  }

  // BLOCK
  &.-b,
  &.block {
    max-width: unset;
  }

  // ANIMATED -> Google Style
  /*
  &.animated {
    $lh: $input-height + 10px;
    position: relative;
    input {
      height: $lh;
      border-top: none;
      border-left: none;
      border-right: none;
      border-radius: 0;
      & + label {
        position: absolute;
        top: 0;
        // @include input-props();
        line-height: $input-height;
      }
    }

    &.has-data input,
    input:focus {
      & + label {
        transform: translateY(-5px);
        font-size: 10px;
        line-height: 11px;
      }
    }

    label {
      transition: all 0.2s ease;
    }
  }
  */

  //FILE
  &.file {
    input {
      @include hide;
      & + label {
        @include hide;
      }
      &[type="file"],
      &[type="image"] {
        border: none;
        height: 0px;
        width: 0px;
        font-size: 0;
        & + label {
          @include no-select;
          @include show;
          @include input-style;
          @include input-props;
          line-height: $input-height;
          text-align: center !important;
          overflow: hidden;
          padding: 0;
        }
      }
    }

    //active file-input
    &.has-file {
      input {
        & + label {
          background: $accent-color;
          color: white;
        }
      }
    }
  }

  //TEXTAREA
  &.textarea {
    max-width: 450px;
    // hide any invalid elements
    input {
      display: none;
    }

    textarea,
    label,
    span {
      display: block;
    }

    &.-b,&.block{
      max-width: none;
    }

    textarea {
      @include input-style;
      @include textarea-props;
    }

    &.h-resize {
      textarea {
        resize: horizontal;
      }
    }
    &.v-resize {
      textarea {
        resize: vertical;
      }
    }
    &.no-resize {
      textarea {
        resize: none;
      }
    }
  }

  // SELECT
  &.select {
    display: inline-block;
    position: relative;
    min-width: unset;
    select {
      position: relative;
      @include select-props;
      outline: none;
      background: $input-background;
      -moz-appearance: none;
      -webkit-appearance: none;
      z-index: 5;
      &::-ms-expand {
        display: none;
      }
    }

    &:after {
      z-index: 1;
      @include pseudo;
      position: absolute;
      right: $input-height - 35px;
      top: 50%;
      transform: translateY(1px);
      border: 7px solid transparent;
      border-top-color: rgba(black, 0.45);
    }

    &.c {
      select {
        text-align: center;
      }
    }

    &.-b,&.block{
      max-width: none;
    }

    &.outline{
      select{
        border: $input-border-width $input-border-style $input-border-width;
      }

    }

    // multiple select
    &.group {
      max-width: none;
      display: flex;
      flex-direction: row;
    }
  }

  // PILLS

  &.pills {
    max-width: none;
    flex-direction: row;
    position: relative;

    &.wrap {
      flex-wrap: wrap;
    }

    //wrapper
    .pill {
      display: inline-block;
      margin: 5px;

      &:first-child {
        margin-left: 0;
      }
      &:last-child {
        margin-right: 0;
      }

      input {
        height: 0px;
        width: 0px;
        position: absolute;
        @include hide;
        & + label {
          @include no-select;
          line-height: $input-height;
          background: #e6e6e6;
          border-radius: $input-border-radius;
          padding: $input-pill-padding;
          text-align: center;
          cursor: pointer;
          margin: 0;
        }

        &:checked {
          & + label {
            background: $accent-color;
            color: white;
          }
        }
      }

      &.outline {
        input {
          & + label {
            height: $input-height - $input-border-width;
            @include input-border-props;
            background: transparent;
          }

          &:checked{
            & + label{
              color: $accent-color;
            }
          }
        }
      }
    }
    // centered pills
    &.c {
      justify-content: center;
    }

    //block-level
    &.b {
      flex-direction: column;
      .pill {
        label {
          width: 100%;
          padding: 10px;
        }
      }
    }
  }

  // TOGGLE

  @mixin toggle($toggle-size, $gap: 1px) {
    height: $toggle-size;
    width: $toggle-size * 2;
    border-radius: $toggle-size / 2;
    &:before {
      height: $toggle-size - $gap * 2;
      width: $toggle-size - $gap * 2;
      left: $gap;
      top: $gap;
    }
  }

  &.toggle {
    &:before {
      display: none;
    }
    @include selectable-label;
    margin: 15px 0;
    flex-direction: row;
    align-items: center;
    .toggle-label {
      display: inline-block;
      line-height: 40px;
      vertical-align: middle;
      @include no-select;
    }

    $gap: 2px;
    input {
      & + label {
        display: flex;
        align-items: center;
        // margin-left: auto;
        position: relative;
        @include toggle(40px, $gap);
        background: rgba(black, 0.15);
        transition: all 0.5s ease;
        &:before {
          right: auto;
          @include pseudo;
          position: absolute;
          right: unset;
          border-radius: 50%;
          background: white;
        }
      }

      &:checked {
        & + label {
          background: $accent-color;
          &:before {
            left: unset;
            right: $gap;
          }
        }
      }
    }
    &.large {
      $gap: 3px;
      input + label {
        @include toggle(50px, $gap);
      }
      input:checked + label:before {
        left: unset;
        right: $gap;
      }
    }
    &.small {
      $gap: 2px;
      input + label {
        @include toggle(30px, $gap);
      }
      input:checked + label:before {
        left: unset;
        right: $gap;
      }
    }
  }
}

.label {
  display: block;
  @include label-props;
}
